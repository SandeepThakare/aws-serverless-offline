service: taco-gallery

provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-1
  stage: dev
  environment:
    TESTNUM: 27
    TESTSTR: hello
    CUSTOMER_INFO: customer-info

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CUSTOMER_INFO}"

resources:
  Resources:
    customer-info:
        Type: AWS::DynamoDB::Table
        DeletionPolicy: Retain
        Properties:
          TableName: customer-info
          AttributeDefinitions:
            - AttributeName: email
              AttributeType: S
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

    TacosDB:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: TacoGallery

functions:
  addCustomerInfo:
      name: ${opt:stage}-addCustomerInfo
      handler: customerInfo/addCustomerInfo.addCustomerInfo
      events:
        - http: 
            path: addCustomerInfo
            method: PUT 
            cors: true
            # integration: lambda
            # authorizer: 
            #   name: authorizer
            #   arn: arn:aws:cognito-idp:us-east-1:047841562770:userpool/us-east-1_yCqvXvqtp
            #   claims: 
            #     - email

  getCustomer:
      name: ${opt:stage}-getCustomerInfo
      handler: customerInfo/getCustomerInfo.getCustomerInfo
      events:
        - http: 
            path: getCustomerInfo/{email}
            method: GET
            cors: true
            # integration: lambda
            # authorizer: 
            #   name: authorizer
            #   arn: arn:aws:cognito-idp:us-east-1:047841562770:userpool/us-east-1_yCqvXvqtp
            #   claims: 
            #   - email

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-webpack

custom:
  webpackIncludeModules:
    packagePath: './package.json'
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  serverless-offline:
    babelOptions:
      presets: ["es2015", "stage-2"]